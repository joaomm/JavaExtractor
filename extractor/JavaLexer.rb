# JavaLexer (Java.g)
# Generated by ANTLR 3.0.1 on 2010-01-20 11:44:55

class JavaLexer
    require 'stringio'

	DOLLAR=51
	PROTECTED=12
	CLASS=4
	ANNOTATION=21
	NEW=22
	LEFT_ANGULAR_BRACKET=25
	RIGHT_ANGULAR_BRACKET=26
	ABSTRACT=14
	EOF=-1
	AT=52
	PARTIAL_LETTER=57
	FINAL=15
	SINGLE_QUOTES=48
	SYNCHRONIZED=17
	SLASH=46
	EXCLATION_MARK=45
	IMPLEMENTS=7
	COMMA=27
	TRANSIENT=18
	IDENTIFIER=5
	EQUAL=31
	TILDE=53
	RETURN=9
	QUESTION_MARK=37
	PLUS=38
	PIPE=43
	INITIAL_LETTER=56
	DIGIT=55
	DOT=34
	T60=60
	ECOMMERCIAL=28
	RIGHT_BRACE=30
	VOLATILE=19
	STATIC=13
	PRIVATE=10
	STRICTFP=20
	NUMBER=8
	HASH=54
	NATIVE=16
	SEMICOLON=24
	MINUS=39
	Tokens=61
	LEFT_SQUARE_BRACKET=35
	RIGHT_SQUARE_BRACKET=36
	RIGHT_PARENTESIS=33
	COLON=42
	DOUBLE_QUOTES=49
	UNDERLINE=50
	WEDGE=44
	WS=23
	MODULUS=41
	LEFT_BRACE=29
	T59=59
	TIMES=40
	EXTENDS=6
	PUBLIC=11
	LEFT_PARENTESIS=32
	T58=58
	BACKSLASH=47
	
    def initialize(input)
        input = StringIO.new(input) if input.respond_to?(:to_str)
        @input = CharStream.new(input)
        @backtracking = 0
        @failed = false

    end

    def next_token
    	# TODO: catch exceptions
		@token = nil
		@channel = nil
		@text = nil

		@start = @input.index
		@line = @input.line
		@pos = @input.column

		@type = nil
		@type_int = nil

		return :EOF if @input.look_ahead(1) == :EOF

		match_Tokens()

		if @token == nil
			@text ||= @input.substring(@start, @input.index - 1)
			@token = Token.new(@type, @type_int, @line, @pos, @text, @channel)
		end

        return @token
    end

    class Token
        attr_reader :token_type
        attr_reader :int_type
        attr_reader :line
        attr_reader :pos
        attr_reader :text
        attr_reader :channel

        def initialize(token_type, int_type, line, pos, text, channel = nil)
            @token_type = token_type
            @int_type = int_type
            @line = line
            @pos = pos
            @text = text
            @channel = channel
        end

		alias :to_i :int_type
    end


    private

    class CharStream
        attr_reader :line
        attr_reader :column
        attr_reader :index

        def initialize(input)
            @buffer = ""
            @input = input
            @line = 1
            @column = 0

            @index = 0;
        end

        # returns a Fixnum between 0 and 0xFFFF or :EOF
        def look_ahead(pos)
            offset = @index + pos - 1
            if @buffer.length < offset + 1
                char = @input.read(offset + 1 - @buffer.length)
                @buffer << char if not char.nil?
            end

            if offset < @buffer.length
                @buffer[offset]
            else
                :EOF
            end
        end

        def mark
            @state = { :index => @index, :line => @line, :column => @column }
            return 0
        end

        def rewind(marker)
            @index = @state[:index]
            @line = @state[:line]
            @column = @state[:column]
        end

        def consume
           look_ahead(1) # force a read from the input if necessary
           @column = @column + 1
           if @buffer[@index] == ?\n
                @line = @line + 1
                @column = 0
           end
           @index = @index + 1
        end

        def substring(start, stop)
            @buffer.slice(start, stop - start + 1)
        end
    end


    def match(value = nil)
        @failed = false
        case
            when value.nil?
                @input.consume()
            when value.respond_to?(:to_str)
                catch(:done) do
                    value.each_byte do |c|
                        @failed ||= !(@input.look_ahead(1) == c)
                        @input.consume() if !@failed
                        throw :done if @failed
                    end
                end
            else
                @failed = !(@input.look_ahead(1) == value)
                @input.consume() if !@failed
        end

		if @failed && @backtracking <= 0
			raise "Expected #{value.respond_to?(:chr) ? value.chr : value}"
		end
    end

    def match_range(from, to)
        char = @input.look_ahead(1)

        if char != :EOF && (char >= from || char <= to)
			@failed = false
			match()
        elsif @backtracking > 0
            @failed = true
        else
            raise "Expected [#{from.chr}..#{to.chr}]"
        end
    end

    def match_T58()

    		@type = :T58
    		@type_int = T58
    		# 7:7: 'this'
    		match("this")

    end

    def match_T59()

    		@type = :T59
    		@type_int = T59
    		# 8:7: '\\\\\"'
    		match("\\\"")

    end

    def match_T60()

    		@type = :T60
    		@type_int = T60
    		# 9:7: '\\\\\\''
    		match("\\\'")

    end

    def match_NEW()

    		@type = :NEW
    		@type_int = NEW
    		# 390:6: 'new'
    		match("new")

    end

    def match_PRIVATE()

    		@type = :PRIVATE
    		@type_int = PRIVATE
    		# 392:10: 'private'
    		match("private")

    end

    def match_PUBLIC()

    		@type = :PUBLIC
    		@type_int = PUBLIC
    		# 394:9: 'public'
    		match("public")

    end

    def match_PROTECTED()

    		@type = :PROTECTED
    		@type_int = PROTECTED
    		# 396:12: 'protected'
    		match("protected")

    end

    def match_STATIC()

    		@type = :STATIC
    		@type_int = STATIC
    		# 398:9: 'static'
    		match("static")

    end

    def match_ABSTRACT()

    		@type = :ABSTRACT
    		@type_int = ABSTRACT
    		# 400:11: 'abstract'
    		match("abstract")

    end

    def match_FINAL()

    		@type = :FINAL
    		@type_int = FINAL
    		# 402:8: 'final'
    		match("final")

    end

    def match_NATIVE()

    		@type = :NATIVE
    		@type_int = NATIVE
    		# 404:9: 'native'
    		match("native")

    end

    def match_SYNCHRONIZED()

    		@type = :SYNCHRONIZED
    		@type_int = SYNCHRONIZED
    		# 406:15: 'synchronized'
    		match("synchronized")

    end

    def match_TRANSIENT()

    		@type = :TRANSIENT
    		@type_int = TRANSIENT
    		# 408:12: 'transient'
    		match("transient")

    end

    def match_VOLATILE()

    		@type = :VOLATILE
    		@type_int = VOLATILE
    		# 410:11: 'volatile'
    		match("volatile")

    end

    def match_STRICTFP()

    		@type = :STRICTFP
    		@type_int = STRICTFP
    		# 412:11: 'strictfp'
    		match("strictfp")

    end

    def match_CLASS()

    		@type = :CLASS
    		@type_int = CLASS
    		# 414:9: 'class'
    		match("class")

    end

    def match_EXTENDS()

    		@type = :EXTENDS
    		@type_int = EXTENDS
    		# 416:10: 'extends'
    		match("extends")

    end

    def match_IMPLEMENTS()

    		@type = :IMPLEMENTS
    		@type_int = IMPLEMENTS
    		# 418:13: 'implements'
    		match("implements")

    end

    def match_ANNOTATION()

    		@type = :ANNOTATION
    		@type_int = ANNOTATION
    		# 420:13: 'annotation'
    		match("annotation")

    end

    def match_RETURN()

    		@type = :RETURN
    		@type_int = RETURN
    		# 422:9: 'return'
    		match("return")

    end

    def match_WS()

    		@type = :WS
    		@type_int = WS
    		# 424:6: ( '\\n' | '\\t' | '\\r' | ' ' )+
    		# 424:6: ( '\\n' | '\\t' | '\\r' | ' ' )+
    		matchedOnce1 = false
    		while true
    		    alt1 = 2
    		    # ()+ loopback of 424:6: ( '\\n' | '\\t' | '\\r' | ' ' )+
    		    look_ahead1_0 = @input.look_ahead(1)
    		    look_ahead1_0 = -1 if look_ahead1_0 == :EOF
    		    if (look_ahead1_0 >= ?\t && look_ahead1_0 <= ?\n) || look_ahead1_0 == ?\r || look_ahead1_0 == ?\s  
    		        alt1 = 1
    		    end
    		    case alt1
    		        when 1
    		            # 
    		            if (@input.look_ahead(1) >= ?\t && @input.look_ahead(1) <= ?\n) || @input.look_ahead(1) == ?\r || @input.look_ahead(1) == ?\s
    		                match()
    		            else
    		                raise "Expected set"
    		            end
    		        else
    		            break
    		    end
    		    matchedOnce1 = true
    		end

    		if !matchedOnce1
    		    raise "Expected at least one match: 424:6: ( '\\n' | '\\t' | '\\r' | ' ' )+"
    		end
    		 @channel = 99 
    end

    def match_SEMICOLON()

    		@type = :SEMICOLON
    		@type_int = SEMICOLON
    		# 426:12: ';'
    		match(?;)
    end

    def match_LEFT_ANGULAR_BRACKET()

    		@type = :LEFT_ANGULAR_BRACKET
    		@type_int = LEFT_ANGULAR_BRACKET
    		# 428:23: '<'
    		match(?<)
    end

    def match_RIGHT_ANGULAR_BRACKET()

    		@type = :RIGHT_ANGULAR_BRACKET
    		@type_int = RIGHT_ANGULAR_BRACKET
    		# 430:24: '>'
    		match(?>)
    end

    def match_COMMA()

    		@type = :COMMA
    		@type_int = COMMA
    		# 432:8: ','
    		match(?,)
    end

    def match_ECOMMERCIAL()

    		@type = :ECOMMERCIAL
    		@type_int = ECOMMERCIAL
    		# 434:14: '&'
    		match(?&)
    end

    def match_LEFT_BRACE()

    		@type = :LEFT_BRACE
    		@type_int = LEFT_BRACE
    		# 436:13: '{'
    		match(?{)
    end

    def match_RIGHT_BRACE()

    		@type = :RIGHT_BRACE
    		@type_int = RIGHT_BRACE
    		# 438:14: '}'
    		match(?})
    end

    def match_EQUAL()

    		@type = :EQUAL
    		@type_int = EQUAL
    		# 440:8: '='
    		match(?=)
    end

    def match_LEFT_PARENTESIS()

    		@type = :LEFT_PARENTESIS
    		@type_int = LEFT_PARENTESIS
    		# 442:18: '('
    		match(?()
    end

    def match_RIGHT_PARENTESIS()

    		@type = :RIGHT_PARENTESIS
    		@type_int = RIGHT_PARENTESIS
    		# 444:19: ')'
    		match(?))
    end

    def match_DOT()

    		@type = :DOT
    		@type_int = DOT
    		# 446:6: '.'
    		match(?.)
    end

    def match_LEFT_SQUARE_BRACKET()

    		@type = :LEFT_SQUARE_BRACKET
    		@type_int = LEFT_SQUARE_BRACKET
    		# 448:22: '['
    		match(?[)
    end

    def match_RIGHT_SQUARE_BRACKET()

    		@type = :RIGHT_SQUARE_BRACKET
    		@type_int = RIGHT_SQUARE_BRACKET
    		# 450:23: ']'
    		match(?])
    end

    def match_QUESTION_MARK()

    		@type = :QUESTION_MARK
    		@type_int = QUESTION_MARK
    		# 452:16: '?'
    		match(??)
    end

    def match_PLUS()

    		@type = :PLUS
    		@type_int = PLUS
    		# 454:7: '+'
    		match(?+)
    end

    def match_MINUS()

    		@type = :MINUS
    		@type_int = MINUS
    		# 456:8: '-'
    		match(?-)
    end

    def match_TIMES()

    		@type = :TIMES
    		@type_int = TIMES
    		# 458:8: '*'
    		match(?*)
    end

    def match_MODULUS()

    		@type = :MODULUS
    		@type_int = MODULUS
    		# 460:10: '%'
    		match(?%)
    end

    def match_COLON()

    		@type = :COLON
    		@type_int = COLON
    		# 462:9: ':'
    		match(?:)
    end

    def match_PIPE()

    		@type = :PIPE
    		@type_int = PIPE
    		# 464:7: '|'
    		match(?|)
    end

    def match_WEDGE()

    		@type = :WEDGE
    		@type_int = WEDGE
    		# 466:8: '^'
    		match(?^)
    end

    def match_EXCLATION_MARK()

    		@type = :EXCLATION_MARK
    		@type_int = EXCLATION_MARK
    		# 468:17: '!'
    		match(?!)
    end

    def match_SLASH()

    		@type = :SLASH
    		@type_int = SLASH
    		# 470:8: '/'
    		match(?/)
    end

    def match_BACKSLASH()

    		@type = :BACKSLASH
    		@type_int = BACKSLASH
    		# 472:12: '\\\\'
    		match(?\\)
    end

    def match_SINGLE_QUOTES()

    		@type = :SINGLE_QUOTES
    		@type_int = SINGLE_QUOTES
    		# 474:16: '\\''
    		match(?\')
    end

    def match_DOUBLE_QUOTES()

    		@type = :DOUBLE_QUOTES
    		@type_int = DOUBLE_QUOTES
    		# 476:16: '\"'
    		match(?")
    end

    def match_UNDERLINE()

    		@type = :UNDERLINE
    		@type_int = UNDERLINE
    		# 478:12: '_'
    		match(?_)
    end

    def match_DOLLAR()

    		@type = :DOLLAR
    		@type_int = DOLLAR
    		# 480:9: '$'
    		match(?$)
    end

    def match_AT()

    		@type = :AT
    		@type_int = AT
    		# 482:5: '@'
    		match(?@)
    end

    def match_TILDE()

    		@type = :TILDE
    		@type_int = TILDE
    		# 484:8: '~'
    		match(?~)
    end

    def match_HASH()

    		@type = :HASH
    		@type_int = HASH
    		# 486:7: '#'
    		match(?#)
    end

    def match_NUMBER()

    		@type = :NUMBER
    		@type_int = NUMBER
    		# 490:7: ( DIGIT )*
    		# 490:7: ( DIGIT )*
    		while true
    		    alt2 = 2
    		    # ()* loopback of 490:7: ( DIGIT )*
    		    look_ahead2_0 = @input.look_ahead(1)
    		    look_ahead2_0 = -1 if look_ahead2_0 == :EOF
    		    if (look_ahead2_0 >= ?0 && look_ahead2_0 <= ?9)  
    		        alt2 = 1
    		    end
    		    case alt2
    		        when 1
    		            # 490:7: DIGIT
    		            match_DIGIT()
    		        else
    		            break
    		    end
    		end
    end

    def match_DIGIT()

    		# 493:8: ( '0' .. '9' )
    		# 493:9: '0' .. '9'
    		match_range(?0, ?9)

    end

    def match_IDENTIFIER()

    		@type = :IDENTIFIER
    		@type_int = IDENTIFIER
    		# 497:5: INITIAL_LETTER ( PARTIAL_LETTER )*
    		match_INITIAL_LETTER()
    		# 497:20: ( PARTIAL_LETTER )*
    		while true
    		    alt3 = 2
    		    # ()* loopback of 497:20: ( PARTIAL_LETTER )*
    		    look_ahead3_0 = @input.look_ahead(1)
    		    look_ahead3_0 = -1 if look_ahead3_0 == :EOF
    		    if (look_ahead3_0 >= ?0 && look_ahead3_0 <= ?9) || (look_ahead3_0 >= ?A && look_ahead3_0 <= ?Z) || look_ahead3_0 == ?_ || (look_ahead3_0 >= ?a && look_ahead3_0 <= ?z)  
    		        alt3 = 1
    		    end
    		    case alt3
    		        when 1
    		            # 497:21: PARTIAL_LETTER
    		            match_PARTIAL_LETTER()
    		        else
    		            break
    		    end
    		end
    end

    def match_INITIAL_LETTER()

    		# 501:18: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )
    		if (@input.look_ahead(1) >= ?A && @input.look_ahead(1) <= ?Z) || @input.look_ahead(1) == ?_ || (@input.look_ahead(1) >= ?a && @input.look_ahead(1) <= ?z)
    		    match()
    		else
    		    raise "Expected set"
    		end

    end

    def match_PARTIAL_LETTER()

    		# 504:18: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )
    		if (@input.look_ahead(1) >= ?0 && @input.look_ahead(1) <= ?9) || (@input.look_ahead(1) >= ?A && @input.look_ahead(1) <= ?Z) || @input.look_ahead(1) == ?_ || (@input.look_ahead(1) >= ?a && @input.look_ahead(1) <= ?z)
    		    match()
    		else
    		    raise "Expected set"
    		end

    end

    def match_Tokens()

    		# 1:8: ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER )
    		alt4 = 54
    		# 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		case @input.look_ahead(1)
    		    when ?t
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        case @input.look_ahead(2)
    		            when ?h
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_46 = @input.look_ahead(3)
    		                look_ahead4_46 = -1 if look_ahead4_46 == :EOF
    		                if look_ahead4_46 == ?i  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_66 = @input.look_ahead(4)
    		                    look_ahead4_66 = -1 if look_ahead4_66 == :EOF
    		                    if look_ahead4_66 == ?s  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_84 = @input.look_ahead(5)
    		                        look_ahead4_84 = -1 if look_ahead4_84 == :EOF
    		                        if (look_ahead4_84 >= ?0 && look_ahead4_84 <= ?9) || (look_ahead4_84 >= ?A && look_ahead4_84 <= ?Z) || look_ahead4_84 == ?_ || (look_ahead4_84 >= ?a && look_ahead4_84 <= ?z)  
    		                            alt4 = 54
    		                        else
    		                            alt4 = 1
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            when ?r
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_47 = @input.look_ahead(3)
    		                look_ahead4_47 = -1 if look_ahead4_47 == :EOF
    		                if look_ahead4_47 == ?a  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_67 = @input.look_ahead(4)
    		                    look_ahead4_67 = -1 if look_ahead4_67 == :EOF
    		                    if look_ahead4_67 == ?n  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_85 = @input.look_ahead(5)
    		                        look_ahead4_85 = -1 if look_ahead4_85 == :EOF
    		                        if look_ahead4_85 == ?s  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_103 = @input.look_ahead(6)
    		                            look_ahead4_103 = -1 if look_ahead4_103 == :EOF
    		                            if look_ahead4_103 == ?i  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_119 = @input.look_ahead(7)
    		                                look_ahead4_119 = -1 if look_ahead4_119 == :EOF
    		                                if look_ahead4_119 == ?e  
    		                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                    look_ahead4_135 = @input.look_ahead(8)
    		                                    look_ahead4_135 = -1 if look_ahead4_135 == :EOF
    		                                    if look_ahead4_135 == ?n  
    		                                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                        look_ahead4_149 = @input.look_ahead(9)
    		                                        look_ahead4_149 = -1 if look_ahead4_149 == :EOF
    		                                        if look_ahead4_149 == ?t  
    		                                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                            look_ahead4_159 = @input.look_ahead(10)
    		                                            look_ahead4_159 = -1 if look_ahead4_159 == :EOF
    		                                            if (look_ahead4_159 >= ?0 && look_ahead4_159 <= ?9) || (look_ahead4_159 >= ?A && look_ahead4_159 <= ?Z) || look_ahead4_159 == ?_ || (look_ahead4_159 >= ?a && look_ahead4_159 <= ?z)  
    		                                                alt4 = 54
    		                                            else
    		                                                alt4 = 13
    		                                            end
    		                                        else
    		                                            alt4 = 54
    		                                        end
    		                                    else
    		                                        alt4 = 54
    		                                    end
    		                                else
    		                                    alt4 = 54
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54

    		        end
    		    when ?\\
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        case @input.look_ahead(2)
    		            when ?\'
    		                alt4 = 3
    		            when ?"
    		                alt4 = 2
    		            else
    		                alt4 = 45

    		        end
    		    when ?n
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        case @input.look_ahead(2)
    		            when ?e
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_51 = @input.look_ahead(3)
    		                look_ahead4_51 = -1 if look_ahead4_51 == :EOF
    		                if look_ahead4_51 == ?w  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_68 = @input.look_ahead(4)
    		                    look_ahead4_68 = -1 if look_ahead4_68 == :EOF
    		                    if (look_ahead4_68 >= ?0 && look_ahead4_68 <= ?9) || (look_ahead4_68 >= ?A && look_ahead4_68 <= ?Z) || look_ahead4_68 == ?_ || (look_ahead4_68 >= ?a && look_ahead4_68 <= ?z)  
    		                        alt4 = 54
    		                    else
    		                        alt4 = 4
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            when ?a
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_52 = @input.look_ahead(3)
    		                look_ahead4_52 = -1 if look_ahead4_52 == :EOF
    		                if look_ahead4_52 == ?t  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_69 = @input.look_ahead(4)
    		                    look_ahead4_69 = -1 if look_ahead4_69 == :EOF
    		                    if look_ahead4_69 == ?i  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_87 = @input.look_ahead(5)
    		                        look_ahead4_87 = -1 if look_ahead4_87 == :EOF
    		                        if look_ahead4_87 == ?v  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_104 = @input.look_ahead(6)
    		                            look_ahead4_104 = -1 if look_ahead4_104 == :EOF
    		                            if look_ahead4_104 == ?e  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_120 = @input.look_ahead(7)
    		                                look_ahead4_120 = -1 if look_ahead4_120 == :EOF
    		                                if (look_ahead4_120 >= ?0 && look_ahead4_120 <= ?9) || (look_ahead4_120 >= ?A && look_ahead4_120 <= ?Z) || look_ahead4_120 == ?_ || (look_ahead4_120 >= ?a && look_ahead4_120 <= ?z)  
    		                                    alt4 = 54
    		                                else
    		                                    alt4 = 11
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54

    		        end
    		    when ?p
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        case @input.look_ahead(2)
    		            when ?r
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                case @input.look_ahead(3)
    		                    when ?o
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_70 = @input.look_ahead(4)
    		                        look_ahead4_70 = -1 if look_ahead4_70 == :EOF
    		                        if look_ahead4_70 == ?t  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_88 = @input.look_ahead(5)
    		                            look_ahead4_88 = -1 if look_ahead4_88 == :EOF
    		                            if look_ahead4_88 == ?e  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_105 = @input.look_ahead(6)
    		                                look_ahead4_105 = -1 if look_ahead4_105 == :EOF
    		                                if look_ahead4_105 == ?c  
    		                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                    look_ahead4_121 = @input.look_ahead(7)
    		                                    look_ahead4_121 = -1 if look_ahead4_121 == :EOF
    		                                    if look_ahead4_121 == ?t  
    		                                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                        look_ahead4_137 = @input.look_ahead(8)
    		                                        look_ahead4_137 = -1 if look_ahead4_137 == :EOF
    		                                        if look_ahead4_137 == ?e  
    		                                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                            look_ahead4_150 = @input.look_ahead(9)
    		                                            look_ahead4_150 = -1 if look_ahead4_150 == :EOF
    		                                            if look_ahead4_150 == ?d  
    		                                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                                look_ahead4_160 = @input.look_ahead(10)
    		                                                look_ahead4_160 = -1 if look_ahead4_160 == :EOF
    		                                                if (look_ahead4_160 >= ?0 && look_ahead4_160 <= ?9) || (look_ahead4_160 >= ?A && look_ahead4_160 <= ?Z) || look_ahead4_160 == ?_ || (look_ahead4_160 >= ?a && look_ahead4_160 <= ?z)  
    		                                                    alt4 = 54
    		                                                else
    		                                                    alt4 = 7
    		                                                end
    		                                            else
    		                                                alt4 = 54
    		                                            end
    		                                        else
    		                                            alt4 = 54
    		                                        end
    		                                    else
    		                                        alt4 = 54
    		                                    end
    		                                else
    		                                    alt4 = 54
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    when ?i
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_71 = @input.look_ahead(4)
    		                        look_ahead4_71 = -1 if look_ahead4_71 == :EOF
    		                        if look_ahead4_71 == ?v  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_89 = @input.look_ahead(5)
    		                            look_ahead4_89 = -1 if look_ahead4_89 == :EOF
    		                            if look_ahead4_89 == ?a  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_106 = @input.look_ahead(6)
    		                                look_ahead4_106 = -1 if look_ahead4_106 == :EOF
    		                                if look_ahead4_106 == ?t  
    		                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                    look_ahead4_122 = @input.look_ahead(7)
    		                                    look_ahead4_122 = -1 if look_ahead4_122 == :EOF
    		                                    if look_ahead4_122 == ?e  
    		                                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                        look_ahead4_138 = @input.look_ahead(8)
    		                                        look_ahead4_138 = -1 if look_ahead4_138 == :EOF
    		                                        if (look_ahead4_138 >= ?0 && look_ahead4_138 <= ?9) || (look_ahead4_138 >= ?A && look_ahead4_138 <= ?Z) || look_ahead4_138 == ?_ || (look_ahead4_138 >= ?a && look_ahead4_138 <= ?z)  
    		                                            alt4 = 54
    		                                        else
    		                                            alt4 = 5
    		                                        end
    		                                    else
    		                                        alt4 = 54
    		                                    end
    		                                else
    		                                    alt4 = 54
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54

    		                end
    		            when ?u
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_54 = @input.look_ahead(3)
    		                look_ahead4_54 = -1 if look_ahead4_54 == :EOF
    		                if look_ahead4_54 == ?b  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_72 = @input.look_ahead(4)
    		                    look_ahead4_72 = -1 if look_ahead4_72 == :EOF
    		                    if look_ahead4_72 == ?l  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_90 = @input.look_ahead(5)
    		                        look_ahead4_90 = -1 if look_ahead4_90 == :EOF
    		                        if look_ahead4_90 == ?i  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_107 = @input.look_ahead(6)
    		                            look_ahead4_107 = -1 if look_ahead4_107 == :EOF
    		                            if look_ahead4_107 == ?c  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_123 = @input.look_ahead(7)
    		                                look_ahead4_123 = -1 if look_ahead4_123 == :EOF
    		                                if (look_ahead4_123 >= ?0 && look_ahead4_123 <= ?9) || (look_ahead4_123 >= ?A && look_ahead4_123 <= ?Z) || look_ahead4_123 == ?_ || (look_ahead4_123 >= ?a && look_ahead4_123 <= ?z)  
    		                                    alt4 = 54
    		                                else
    		                                    alt4 = 6
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54

    		        end
    		    when ?s
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        case @input.look_ahead(2)
    		            when ?t
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                case @input.look_ahead(3)
    		                    when ?a
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_73 = @input.look_ahead(4)
    		                        look_ahead4_73 = -1 if look_ahead4_73 == :EOF
    		                        if look_ahead4_73 == ?t  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_91 = @input.look_ahead(5)
    		                            look_ahead4_91 = -1 if look_ahead4_91 == :EOF
    		                            if look_ahead4_91 == ?i  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_108 = @input.look_ahead(6)
    		                                look_ahead4_108 = -1 if look_ahead4_108 == :EOF
    		                                if look_ahead4_108 == ?c  
    		                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                    look_ahead4_124 = @input.look_ahead(7)
    		                                    look_ahead4_124 = -1 if look_ahead4_124 == :EOF
    		                                    if (look_ahead4_124 >= ?0 && look_ahead4_124 <= ?9) || (look_ahead4_124 >= ?A && look_ahead4_124 <= ?Z) || look_ahead4_124 == ?_ || (look_ahead4_124 >= ?a && look_ahead4_124 <= ?z)  
    		                                        alt4 = 54
    		                                    else
    		                                        alt4 = 8
    		                                    end
    		                                else
    		                                    alt4 = 54
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    when ?r
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_74 = @input.look_ahead(4)
    		                        look_ahead4_74 = -1 if look_ahead4_74 == :EOF
    		                        if look_ahead4_74 == ?i  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_92 = @input.look_ahead(5)
    		                            look_ahead4_92 = -1 if look_ahead4_92 == :EOF
    		                            if look_ahead4_92 == ?c  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_109 = @input.look_ahead(6)
    		                                look_ahead4_109 = -1 if look_ahead4_109 == :EOF
    		                                if look_ahead4_109 == ?t  
    		                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                    look_ahead4_125 = @input.look_ahead(7)
    		                                    look_ahead4_125 = -1 if look_ahead4_125 == :EOF
    		                                    if look_ahead4_125 == ?f  
    		                                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                        look_ahead4_141 = @input.look_ahead(8)
    		                                        look_ahead4_141 = -1 if look_ahead4_141 == :EOF
    		                                        if look_ahead4_141 == ?p  
    		                                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                            look_ahead4_152 = @input.look_ahead(9)
    		                                            look_ahead4_152 = -1 if look_ahead4_152 == :EOF
    		                                            if (look_ahead4_152 >= ?0 && look_ahead4_152 <= ?9) || (look_ahead4_152 >= ?A && look_ahead4_152 <= ?Z) || look_ahead4_152 == ?_ || (look_ahead4_152 >= ?a && look_ahead4_152 <= ?z)  
    		                                                alt4 = 54
    		                                            else
    		                                                alt4 = 15
    		                                            end
    		                                        else
    		                                            alt4 = 54
    		                                        end
    		                                    else
    		                                        alt4 = 54
    		                                    end
    		                                else
    		                                    alt4 = 54
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54

    		                end
    		            when ?y
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_56 = @input.look_ahead(3)
    		                look_ahead4_56 = -1 if look_ahead4_56 == :EOF
    		                if look_ahead4_56 == ?n  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_75 = @input.look_ahead(4)
    		                    look_ahead4_75 = -1 if look_ahead4_75 == :EOF
    		                    if look_ahead4_75 == ?c  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_93 = @input.look_ahead(5)
    		                        look_ahead4_93 = -1 if look_ahead4_93 == :EOF
    		                        if look_ahead4_93 == ?h  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_110 = @input.look_ahead(6)
    		                            look_ahead4_110 = -1 if look_ahead4_110 == :EOF
    		                            if look_ahead4_110 == ?r  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_126 = @input.look_ahead(7)
    		                                look_ahead4_126 = -1 if look_ahead4_126 == :EOF
    		                                if look_ahead4_126 == ?o  
    		                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                    look_ahead4_142 = @input.look_ahead(8)
    		                                    look_ahead4_142 = -1 if look_ahead4_142 == :EOF
    		                                    if look_ahead4_142 == ?n  
    		                                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                        look_ahead4_153 = @input.look_ahead(9)
    		                                        look_ahead4_153 = -1 if look_ahead4_153 == :EOF
    		                                        if look_ahead4_153 == ?i  
    		                                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                            look_ahead4_162 = @input.look_ahead(10)
    		                                            look_ahead4_162 = -1 if look_ahead4_162 == :EOF
    		                                            if look_ahead4_162 == ?z  
    		                                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                                look_ahead4_169 = @input.look_ahead(11)
    		                                                look_ahead4_169 = -1 if look_ahead4_169 == :EOF
    		                                                if look_ahead4_169 == ?e  
    		                                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                                    look_ahead4_172 = @input.look_ahead(12)
    		                                                    look_ahead4_172 = -1 if look_ahead4_172 == :EOF
    		                                                    if look_ahead4_172 == ?d  
    		                                                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                                        look_ahead4_175 = @input.look_ahead(13)
    		                                                        look_ahead4_175 = -1 if look_ahead4_175 == :EOF
    		                                                        if (look_ahead4_175 >= ?0 && look_ahead4_175 <= ?9) || (look_ahead4_175 >= ?A && look_ahead4_175 <= ?Z) || look_ahead4_175 == ?_ || (look_ahead4_175 >= ?a && look_ahead4_175 <= ?z)  
    		                                                            alt4 = 54
    		                                                        else
    		                                                            alt4 = 12
    		                                                        end
    		                                                    else
    		                                                        alt4 = 54
    		                                                    end
    		                                                else
    		                                                    alt4 = 54
    		                                                end
    		                                            else
    		                                                alt4 = 54
    		                                            end
    		                                        else
    		                                            alt4 = 54
    		                                        end
    		                                    else
    		                                        alt4 = 54
    		                                    end
    		                                else
    		                                    alt4 = 54
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54

    		        end
    		    when ?a
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        case @input.look_ahead(2)
    		            when ?b
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_57 = @input.look_ahead(3)
    		                look_ahead4_57 = -1 if look_ahead4_57 == :EOF
    		                if look_ahead4_57 == ?s  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_76 = @input.look_ahead(4)
    		                    look_ahead4_76 = -1 if look_ahead4_76 == :EOF
    		                    if look_ahead4_76 == ?t  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_94 = @input.look_ahead(5)
    		                        look_ahead4_94 = -1 if look_ahead4_94 == :EOF
    		                        if look_ahead4_94 == ?r  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_111 = @input.look_ahead(6)
    		                            look_ahead4_111 = -1 if look_ahead4_111 == :EOF
    		                            if look_ahead4_111 == ?a  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_127 = @input.look_ahead(7)
    		                                look_ahead4_127 = -1 if look_ahead4_127 == :EOF
    		                                if look_ahead4_127 == ?c  
    		                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                    look_ahead4_143 = @input.look_ahead(8)
    		                                    look_ahead4_143 = -1 if look_ahead4_143 == :EOF
    		                                    if look_ahead4_143 == ?t  
    		                                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                        look_ahead4_154 = @input.look_ahead(9)
    		                                        look_ahead4_154 = -1 if look_ahead4_154 == :EOF
    		                                        if (look_ahead4_154 >= ?0 && look_ahead4_154 <= ?9) || (look_ahead4_154 >= ?A && look_ahead4_154 <= ?Z) || look_ahead4_154 == ?_ || (look_ahead4_154 >= ?a && look_ahead4_154 <= ?z)  
    		                                            alt4 = 54
    		                                        else
    		                                            alt4 = 9
    		                                        end
    		                                    else
    		                                        alt4 = 54
    		                                    end
    		                                else
    		                                    alt4 = 54
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            when ?n
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_58 = @input.look_ahead(3)
    		                look_ahead4_58 = -1 if look_ahead4_58 == :EOF
    		                if look_ahead4_58 == ?n  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_77 = @input.look_ahead(4)
    		                    look_ahead4_77 = -1 if look_ahead4_77 == :EOF
    		                    if look_ahead4_77 == ?o  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_95 = @input.look_ahead(5)
    		                        look_ahead4_95 = -1 if look_ahead4_95 == :EOF
    		                        if look_ahead4_95 == ?t  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_112 = @input.look_ahead(6)
    		                            look_ahead4_112 = -1 if look_ahead4_112 == :EOF
    		                            if look_ahead4_112 == ?a  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_128 = @input.look_ahead(7)
    		                                look_ahead4_128 = -1 if look_ahead4_128 == :EOF
    		                                if look_ahead4_128 == ?t  
    		                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                    look_ahead4_144 = @input.look_ahead(8)
    		                                    look_ahead4_144 = -1 if look_ahead4_144 == :EOF
    		                                    if look_ahead4_144 == ?i  
    		                                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                        look_ahead4_155 = @input.look_ahead(9)
    		                                        look_ahead4_155 = -1 if look_ahead4_155 == :EOF
    		                                        if look_ahead4_155 == ?o  
    		                                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                            look_ahead4_164 = @input.look_ahead(10)
    		                                            look_ahead4_164 = -1 if look_ahead4_164 == :EOF
    		                                            if look_ahead4_164 == ?n  
    		                                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                                look_ahead4_170 = @input.look_ahead(11)
    		                                                look_ahead4_170 = -1 if look_ahead4_170 == :EOF
    		                                                if (look_ahead4_170 >= ?0 && look_ahead4_170 <= ?9) || (look_ahead4_170 >= ?A && look_ahead4_170 <= ?Z) || look_ahead4_170 == ?_ || (look_ahead4_170 >= ?a && look_ahead4_170 <= ?z)  
    		                                                    alt4 = 54
    		                                                else
    		                                                    alt4 = 19
    		                                                end
    		                                            else
    		                                                alt4 = 54
    		                                            end
    		                                        else
    		                                            alt4 = 54
    		                                        end
    		                                    else
    		                                        alt4 = 54
    		                                    end
    		                                else
    		                                    alt4 = 54
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54

    		        end
    		    when ?f
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        look_ahead4_7 = @input.look_ahead(2)
    		        look_ahead4_7 = -1 if look_ahead4_7 == :EOF
    		        if look_ahead4_7 == ?i  
    		            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		            look_ahead4_59 = @input.look_ahead(3)
    		            look_ahead4_59 = -1 if look_ahead4_59 == :EOF
    		            if look_ahead4_59 == ?n  
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_78 = @input.look_ahead(4)
    		                look_ahead4_78 = -1 if look_ahead4_78 == :EOF
    		                if look_ahead4_78 == ?a  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_96 = @input.look_ahead(5)
    		                    look_ahead4_96 = -1 if look_ahead4_96 == :EOF
    		                    if look_ahead4_96 == ?l  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_113 = @input.look_ahead(6)
    		                        look_ahead4_113 = -1 if look_ahead4_113 == :EOF
    		                        if (look_ahead4_113 >= ?0 && look_ahead4_113 <= ?9) || (look_ahead4_113 >= ?A && look_ahead4_113 <= ?Z) || look_ahead4_113 == ?_ || (look_ahead4_113 >= ?a && look_ahead4_113 <= ?z)  
    		                            alt4 = 54
    		                        else
    		                            alt4 = 10
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54
    		            end
    		        else
    		            alt4 = 54
    		        end
    		    when ?v
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        look_ahead4_8 = @input.look_ahead(2)
    		        look_ahead4_8 = -1 if look_ahead4_8 == :EOF
    		        if look_ahead4_8 == ?o  
    		            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		            look_ahead4_60 = @input.look_ahead(3)
    		            look_ahead4_60 = -1 if look_ahead4_60 == :EOF
    		            if look_ahead4_60 == ?l  
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_79 = @input.look_ahead(4)
    		                look_ahead4_79 = -1 if look_ahead4_79 == :EOF
    		                if look_ahead4_79 == ?a  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_97 = @input.look_ahead(5)
    		                    look_ahead4_97 = -1 if look_ahead4_97 == :EOF
    		                    if look_ahead4_97 == ?t  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_114 = @input.look_ahead(6)
    		                        look_ahead4_114 = -1 if look_ahead4_114 == :EOF
    		                        if look_ahead4_114 == ?i  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_130 = @input.look_ahead(7)
    		                            look_ahead4_130 = -1 if look_ahead4_130 == :EOF
    		                            if look_ahead4_130 == ?l  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_145 = @input.look_ahead(8)
    		                                look_ahead4_145 = -1 if look_ahead4_145 == :EOF
    		                                if look_ahead4_145 == ?e  
    		                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                    look_ahead4_156 = @input.look_ahead(9)
    		                                    look_ahead4_156 = -1 if look_ahead4_156 == :EOF
    		                                    if (look_ahead4_156 >= ?0 && look_ahead4_156 <= ?9) || (look_ahead4_156 >= ?A && look_ahead4_156 <= ?Z) || look_ahead4_156 == ?_ || (look_ahead4_156 >= ?a && look_ahead4_156 <= ?z)  
    		                                        alt4 = 54
    		                                    else
    		                                        alt4 = 14
    		                                    end
    		                                else
    		                                    alt4 = 54
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54
    		            end
    		        else
    		            alt4 = 54
    		        end
    		    when ?c
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        look_ahead4_9 = @input.look_ahead(2)
    		        look_ahead4_9 = -1 if look_ahead4_9 == :EOF
    		        if look_ahead4_9 == ?l  
    		            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		            look_ahead4_61 = @input.look_ahead(3)
    		            look_ahead4_61 = -1 if look_ahead4_61 == :EOF
    		            if look_ahead4_61 == ?a  
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_80 = @input.look_ahead(4)
    		                look_ahead4_80 = -1 if look_ahead4_80 == :EOF
    		                if look_ahead4_80 == ?s  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_98 = @input.look_ahead(5)
    		                    look_ahead4_98 = -1 if look_ahead4_98 == :EOF
    		                    if look_ahead4_98 == ?s  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_115 = @input.look_ahead(6)
    		                        look_ahead4_115 = -1 if look_ahead4_115 == :EOF
    		                        if (look_ahead4_115 >= ?0 && look_ahead4_115 <= ?9) || (look_ahead4_115 >= ?A && look_ahead4_115 <= ?Z) || look_ahead4_115 == ?_ || (look_ahead4_115 >= ?a && look_ahead4_115 <= ?z)  
    		                            alt4 = 54
    		                        else
    		                            alt4 = 16
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54
    		            end
    		        else
    		            alt4 = 54
    		        end
    		    when ?e
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        look_ahead4_10 = @input.look_ahead(2)
    		        look_ahead4_10 = -1 if look_ahead4_10 == :EOF
    		        if look_ahead4_10 == ?x  
    		            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		            look_ahead4_62 = @input.look_ahead(3)
    		            look_ahead4_62 = -1 if look_ahead4_62 == :EOF
    		            if look_ahead4_62 == ?t  
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_81 = @input.look_ahead(4)
    		                look_ahead4_81 = -1 if look_ahead4_81 == :EOF
    		                if look_ahead4_81 == ?e  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_99 = @input.look_ahead(5)
    		                    look_ahead4_99 = -1 if look_ahead4_99 == :EOF
    		                    if look_ahead4_99 == ?n  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_116 = @input.look_ahead(6)
    		                        look_ahead4_116 = -1 if look_ahead4_116 == :EOF
    		                        if look_ahead4_116 == ?d  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_132 = @input.look_ahead(7)
    		                            look_ahead4_132 = -1 if look_ahead4_132 == :EOF
    		                            if look_ahead4_132 == ?s  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_146 = @input.look_ahead(8)
    		                                look_ahead4_146 = -1 if look_ahead4_146 == :EOF
    		                                if (look_ahead4_146 >= ?0 && look_ahead4_146 <= ?9) || (look_ahead4_146 >= ?A && look_ahead4_146 <= ?Z) || look_ahead4_146 == ?_ || (look_ahead4_146 >= ?a && look_ahead4_146 <= ?z)  
    		                                    alt4 = 54
    		                                else
    		                                    alt4 = 17
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54
    		            end
    		        else
    		            alt4 = 54
    		        end
    		    when ?i
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        look_ahead4_11 = @input.look_ahead(2)
    		        look_ahead4_11 = -1 if look_ahead4_11 == :EOF
    		        if look_ahead4_11 == ?m  
    		            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		            look_ahead4_63 = @input.look_ahead(3)
    		            look_ahead4_63 = -1 if look_ahead4_63 == :EOF
    		            if look_ahead4_63 == ?p  
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_82 = @input.look_ahead(4)
    		                look_ahead4_82 = -1 if look_ahead4_82 == :EOF
    		                if look_ahead4_82 == ?l  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_100 = @input.look_ahead(5)
    		                    look_ahead4_100 = -1 if look_ahead4_100 == :EOF
    		                    if look_ahead4_100 == ?e  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_117 = @input.look_ahead(6)
    		                        look_ahead4_117 = -1 if look_ahead4_117 == :EOF
    		                        if look_ahead4_117 == ?m  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_133 = @input.look_ahead(7)
    		                            look_ahead4_133 = -1 if look_ahead4_133 == :EOF
    		                            if look_ahead4_133 == ?e  
    		                                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                look_ahead4_147 = @input.look_ahead(8)
    		                                look_ahead4_147 = -1 if look_ahead4_147 == :EOF
    		                                if look_ahead4_147 == ?n  
    		                                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                    look_ahead4_158 = @input.look_ahead(9)
    		                                    look_ahead4_158 = -1 if look_ahead4_158 == :EOF
    		                                    if look_ahead4_158 == ?t  
    		                                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                        look_ahead4_166 = @input.look_ahead(10)
    		                                        look_ahead4_166 = -1 if look_ahead4_166 == :EOF
    		                                        if look_ahead4_166 == ?s  
    		                                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                                            look_ahead4_171 = @input.look_ahead(11)
    		                                            look_ahead4_171 = -1 if look_ahead4_171 == :EOF
    		                                            if (look_ahead4_171 >= ?0 && look_ahead4_171 <= ?9) || (look_ahead4_171 >= ?A && look_ahead4_171 <= ?Z) || look_ahead4_171 == ?_ || (look_ahead4_171 >= ?a && look_ahead4_171 <= ?z)  
    		                                                alt4 = 54
    		                                            else
    		                                                alt4 = 18
    		                                            end
    		                                        else
    		                                            alt4 = 54
    		                                        end
    		                                    else
    		                                        alt4 = 54
    		                                    end
    		                                else
    		                                    alt4 = 54
    		                                end
    		                            else
    		                                alt4 = 54
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54
    		            end
    		        else
    		            alt4 = 54
    		        end
    		    when ?r
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        look_ahead4_12 = @input.look_ahead(2)
    		        look_ahead4_12 = -1 if look_ahead4_12 == :EOF
    		        if look_ahead4_12 == ?e  
    		            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		            look_ahead4_64 = @input.look_ahead(3)
    		            look_ahead4_64 = -1 if look_ahead4_64 == :EOF
    		            if look_ahead4_64 == ?t  
    		                # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                look_ahead4_83 = @input.look_ahead(4)
    		                look_ahead4_83 = -1 if look_ahead4_83 == :EOF
    		                if look_ahead4_83 == ?u  
    		                    # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                    look_ahead4_101 = @input.look_ahead(5)
    		                    look_ahead4_101 = -1 if look_ahead4_101 == :EOF
    		                    if look_ahead4_101 == ?r  
    		                        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                        look_ahead4_118 = @input.look_ahead(6)
    		                        look_ahead4_118 = -1 if look_ahead4_118 == :EOF
    		                        if look_ahead4_118 == ?n  
    		                            # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		                            look_ahead4_134 = @input.look_ahead(7)
    		                            look_ahead4_134 = -1 if look_ahead4_134 == :EOF
    		                            if (look_ahead4_134 >= ?0 && look_ahead4_134 <= ?9) || (look_ahead4_134 >= ?A && look_ahead4_134 <= ?Z) || look_ahead4_134 == ?_ || (look_ahead4_134 >= ?a && look_ahead4_134 <= ?z)  
    		                                alt4 = 54
    		                            else
    		                                alt4 = 20
    		                            end
    		                        else
    		                            alt4 = 54
    		                        end
    		                    else
    		                        alt4 = 54
    		                    end
    		                else
    		                    alt4 = 54
    		                end
    		            else
    		                alt4 = 54
    		            end
    		        else
    		            alt4 = 54
    		        end
    		    when ?\t,?\n,?\r,?\s
    		        alt4 = 21
    		    when ?;
    		        alt4 = 22
    		    when ?<
    		        alt4 = 23
    		    when ?>
    		        alt4 = 24
    		    when ?,
    		        alt4 = 25
    		    when ?&
    		        alt4 = 26
    		    when ?{
    		        alt4 = 27
    		    when ?}
    		        alt4 = 28
    		    when ?=
    		        alt4 = 29
    		    when ?(
    		        alt4 = 30
    		    when ?)
    		        alt4 = 31
    		    when ?.
    		        alt4 = 32
    		    when ?[
    		        alt4 = 33
    		    when ?]
    		        alt4 = 34
    		    when ??
    		        alt4 = 35
    		    when ?+
    		        alt4 = 36
    		    when ?-
    		        alt4 = 37
    		    when ?*
    		        alt4 = 38
    		    when ?%
    		        alt4 = 39
    		    when ?:
    		        alt4 = 40
    		    when ?|
    		        alt4 = 41
    		    when ?^
    		        alt4 = 42
    		    when ?!
    		        alt4 = 43
    		    when ?/
    		        alt4 = 44
    		    when ?\'
    		        alt4 = 46
    		    when ?"
    		        alt4 = 47
    		    when ?_
    		        # 1:1: Tokens : ( T58 | T59 | T60 | NEW | PRIVATE | PUBLIC | PROTECTED | STATIC | ABSTRACT | FINAL | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | CLASS | EXTENDS | IMPLEMENTS | ANNOTATION | RETURN | WS | SEMICOLON | LEFT_ANGULAR_BRACKET | RIGHT_ANGULAR_BRACKET | COMMA | ECOMMERCIAL | LEFT_BRACE | RIGHT_BRACE | EQUAL | LEFT_PARENTESIS | RIGHT_PARENTESIS | DOT | LEFT_SQUARE_BRACKET | RIGHT_SQUARE_BRACKET | QUESTION_MARK | PLUS | MINUS | TIMES | MODULUS | COLON | PIPE | WEDGE | EXCLATION_MARK | SLASH | BACKSLASH | SINGLE_QUOTES | DOUBLE_QUOTES | UNDERLINE | DOLLAR | AT | TILDE | HASH | NUMBER | IDENTIFIER );
    		        look_ahead4_39 = @input.look_ahead(2)
    		        look_ahead4_39 = -1 if look_ahead4_39 == :EOF
    		        if (look_ahead4_39 >= ?0 && look_ahead4_39 <= ?9) || (look_ahead4_39 >= ?A && look_ahead4_39 <= ?Z) || look_ahead4_39 == ?_ || (look_ahead4_39 >= ?a && look_ahead4_39 <= ?z)  
    		            alt4 = 54
    		        else
    		            alt4 = 48
    		        end
    		    when ?$
    		        alt4 = 49
    		    when ?@
    		        alt4 = 50
    		    when ?~
    		        alt4 = 51
    		    when ?#
    		        alt4 = 52
    		    when ?A,?B,?C,?D,?E,?F,?G,?H,?I,?J,?K,?L,?M,?N,?O,?P,?Q,?R,?S,?T,?U,?V,?W,?X,?Y,?Z,?b,?d,?g,?h,?j,?k,?l,?m,?o,?q,?u,?w,?x,?y,?z
    		        alt4 = 54
    		    else
    		        alt4 = 53

    		end
    		case alt4
    		    when 1
    		        # 1:10: T58
    		        match_T58()
    		    when 2
    		        # 1:14: T59
    		        match_T59()
    		    when 3
    		        # 1:18: T60
    		        match_T60()
    		    when 4
    		        # 1:22: NEW
    		        match_NEW()
    		    when 5
    		        # 1:26: PRIVATE
    		        match_PRIVATE()
    		    when 6
    		        # 1:34: PUBLIC
    		        match_PUBLIC()
    		    when 7
    		        # 1:41: PROTECTED
    		        match_PROTECTED()
    		    when 8
    		        # 1:51: STATIC
    		        match_STATIC()
    		    when 9
    		        # 1:58: ABSTRACT
    		        match_ABSTRACT()
    		    when 10
    		        # 1:67: FINAL
    		        match_FINAL()
    		    when 11
    		        # 1:73: NATIVE
    		        match_NATIVE()
    		    when 12
    		        # 1:80: SYNCHRONIZED
    		        match_SYNCHRONIZED()
    		    when 13
    		        # 1:93: TRANSIENT
    		        match_TRANSIENT()
    		    when 14
    		        # 1:103: VOLATILE
    		        match_VOLATILE()
    		    when 15
    		        # 1:112: STRICTFP
    		        match_STRICTFP()
    		    when 16
    		        # 1:121: CLASS
    		        match_CLASS()
    		    when 17
    		        # 1:127: EXTENDS
    		        match_EXTENDS()
    		    when 18
    		        # 1:135: IMPLEMENTS
    		        match_IMPLEMENTS()
    		    when 19
    		        # 1:146: ANNOTATION
    		        match_ANNOTATION()
    		    when 20
    		        # 1:157: RETURN
    		        match_RETURN()
    		    when 21
    		        # 1:164: WS
    		        match_WS()
    		    when 22
    		        # 1:167: SEMICOLON
    		        match_SEMICOLON()
    		    when 23
    		        # 1:177: LEFT_ANGULAR_BRACKET
    		        match_LEFT_ANGULAR_BRACKET()
    		    when 24
    		        # 1:198: RIGHT_ANGULAR_BRACKET
    		        match_RIGHT_ANGULAR_BRACKET()
    		    when 25
    		        # 1:220: COMMA
    		        match_COMMA()
    		    when 26
    		        # 1:226: ECOMMERCIAL
    		        match_ECOMMERCIAL()
    		    when 27
    		        # 1:238: LEFT_BRACE
    		        match_LEFT_BRACE()
    		    when 28
    		        # 1:249: RIGHT_BRACE
    		        match_RIGHT_BRACE()
    		    when 29
    		        # 1:261: EQUAL
    		        match_EQUAL()
    		    when 30
    		        # 1:267: LEFT_PARENTESIS
    		        match_LEFT_PARENTESIS()
    		    when 31
    		        # 1:283: RIGHT_PARENTESIS
    		        match_RIGHT_PARENTESIS()
    		    when 32
    		        # 1:300: DOT
    		        match_DOT()
    		    when 33
    		        # 1:304: LEFT_SQUARE_BRACKET
    		        match_LEFT_SQUARE_BRACKET()
    		    when 34
    		        # 1:324: RIGHT_SQUARE_BRACKET
    		        match_RIGHT_SQUARE_BRACKET()
    		    when 35
    		        # 1:345: QUESTION_MARK
    		        match_QUESTION_MARK()
    		    when 36
    		        # 1:359: PLUS
    		        match_PLUS()
    		    when 37
    		        # 1:364: MINUS
    		        match_MINUS()
    		    when 38
    		        # 1:370: TIMES
    		        match_TIMES()
    		    when 39
    		        # 1:376: MODULUS
    		        match_MODULUS()
    		    when 40
    		        # 1:384: COLON
    		        match_COLON()
    		    when 41
    		        # 1:390: PIPE
    		        match_PIPE()
    		    when 42
    		        # 1:395: WEDGE
    		        match_WEDGE()
    		    when 43
    		        # 1:401: EXCLATION_MARK
    		        match_EXCLATION_MARK()
    		    when 44
    		        # 1:416: SLASH
    		        match_SLASH()
    		    when 45
    		        # 1:422: BACKSLASH
    		        match_BACKSLASH()
    		    when 46
    		        # 1:432: SINGLE_QUOTES
    		        match_SINGLE_QUOTES()
    		    when 47
    		        # 1:446: DOUBLE_QUOTES
    		        match_DOUBLE_QUOTES()
    		    when 48
    		        # 1:460: UNDERLINE
    		        match_UNDERLINE()
    		    when 49
    		        # 1:470: DOLLAR
    		        match_DOLLAR()
    		    when 50
    		        # 1:477: AT
    		        match_AT()
    		    when 51
    		        # 1:480: TILDE
    		        match_TILDE()
    		    when 52
    		        # 1:486: HASH
    		        match_HASH()
    		    when 53
    		        # 1:491: NUMBER
    		        match_NUMBER()
    		    when 54
    		        # 1:498: IDENTIFIER
    		        match_IDENTIFIER()
    		end

    end


end